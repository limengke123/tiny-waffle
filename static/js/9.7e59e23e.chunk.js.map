{"version":3,"sources":["store/TradingStoreBaseInfo.ts","store/TradingStore.ts","component/trading/TradeForm.tsx","component/trading/TradeTable.tsx","util/rambda.ts","component/trading/TradeInfo.tsx","store/persistenceStore.ts","component/trading/TradeHeaderInfo.tsx","page/trading.tsx"],"names":["TradingStoreBaseInfo","constructor","props","this","name","code","getName","setName","getCode","setCode","times","NP","minus","plus","strip","intervalEnum","enableBoundaryChecking","intervalSizeMap","Map","small","middle","large","TradingStore","getBuyTradingList","resultList","currentGear","gear","maxGear","push","getTradeInfoByGear","rate","amplitudeInterval","sellRate","buyingPrice","basePrice","expectedBuyingMoney","investment","additionalRate","buyingQuantity","computedRealBuyingQuantity","buyingMoney","sellPrice","sellQuantity","sellMoney","middleRateDiff","getRateDiffByRate","middleAmplitudeInterval","largeRateDiff","largeAmplitudeInterval","contractData","stockNumCollect","data","netProfit","extraStockMoney","intervalSize","middleSellPrice","middleSellQuantity","middleSellMoney","middleStockNumCollect","Object","objectSpread2","largeSellPrice","largeSellQuantity","largeSellMoney","largeStockNumCollect","[object Object]","interval","diff","expectedQuantity","baseQuantity","fractionDigits","returnString","result","toFixed","parseFloat","super","defaultBasePrice","defaultAmplitudeInterval","defaultInvestment","defaultMaxGear","defaultAdditionalRate","defaultMiddleAmplitudeInterval","defaultLargeAmplitudeInterval","undefined","getTradingStoreProps","getBasePrice","getAmplitudeInterval","getInvestment","getMaxGear","setBasePrice","price","setAmplitudeInterval","setInvestment","getGear","setMaxGear","minGear","getMiddleAmplitudeInterval","getLargeAmplitudeInterval","TradeForm","handleChange","handleGenerate","react_default","a","createElement","es_form","layout","Item","label","input_number","value","onChange","placeholder","min","max","formatter","concat","parser","replace","es_button","onClick","type","defaultTradeInfoUIView","intervalSizeRowSpan","currentGearRowSpan","buyingMoneyRowSpan","buyingPriceRowSpan","buyingQuantityRowSpan","classNameByIntervalSize","getRender","callback","key","mergeRows","record","node","children","className","rowSpan","columns","title","dataIndex","render","_","get","curringGroupDataByKey","newKey","list","num","i","length","item","nextItem","unshift","groupDataByKey","injectUIDataIntoRawData","preProcessList","map","fn","params","reduce","accumulation","compose","composedProcess","TradeTable","rawDataList","store","table","style","margin","rowKey","bordered","dataSource","pagination","Descriptions","processDataToPercent","TradeInfo","maxDrop","maxRequireMoney","descriptions","badge","status","text","PersistenceStore","storage","localStorage","persistenceKey","uuidv4","Date","toLocaleString","getPersistenceView","getItem","success","JSON","parse","e","error","savePersistenceView","dataString","stringify","setItem","setStorage","getStorage","getPersistenceKey","setPersistence","TradeInfoViewPersistence","addData","dataParams","id","generateKey","date","generateDate","getResponse","saveResponse","removeDataById","index","findIndex","splice","TradeHeaderInfo","_useState","useState","_useState2","slicedToArray","valuationVisible","setValuationVisible","_useState3","_useState4","priceVisible","setPriceVisible","input","target","drawer","placement","width","closable","visible","onClose","src","divide","Sider","Layout","Header","Content","Footer","MenuItem","Menu","Trading","setPrice","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","setStore","_useState11","_useState12","collapsed","setCollapsed","_useState13","_useState14","_useState15","_useState16","back_top","visibilityHeight","collapsible","onCollapse","menu","theme","mode","defaultSelectedKeys","icon","background","padding","TradeHeaderInfo_TradeHeaderInfo","console","log","newStore","TradeTable_TradeTable","textAlign"],"mappings":"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","file":"static/js/9.7e59e23e.chunk.js","sourcesContent":["export interface TradingStoreBaseInfoProps {\n    name?: string\n    code?: string\n}\nexport class TradingStoreBaseInfo {\n    private name: string = ''\n    private code: string = ''\n\n    constructor(props?: TradingStoreBaseInfoProps) {\n        if (props) {\n            props.name && (this.name = props.name)\n            props.code && (this.code = props.code)\n        }\n    }\n\n    public getName() {\n        return this.name\n    }\n\n    public setName(name: string) {\n        this.name = name\n    }\n    public getCode() {\n        return this.code\n    }\n    public setCode(code: string) {\n        this.code = code\n    }\n}\n","import NP from 'number-precision'\nimport { TradingStoreBaseInfo } from './TradingStoreBaseInfo'\n\nconst { times, minus, plus, strip } = NP\nNP.enableBoundaryChecking(false)\n\ninterface BuyTradeInfoView {\n    buyingPrice: number // 买入价格\n    buyingMoney: number // 买入金额\n    buyingQuantity: number // 买入股数\n}\ninterface SellTradeInfoView {\n    sellPrice: number // 卖出价格\n    sellMoney: number // 卖出金额\n    sellQuantity: number // 卖出股数\n}\ninterface InterestTradeInfoView {\n    netProfit: number\n    stockNumCollect: number\n    extraStockMoney: number\n}\n\ninterface BaseTradeInfoView {\n    currentGear: number // 档位\n    rate: number // 对应下降的比例\n    intervalSize: intervalEnum // 网格大小\n}\nexport interface TradeInfoView\n    extends BuyTradeInfoView,\n        SellTradeInfoView,\n        InterestTradeInfoView,\n        BaseTradeInfoView {}\n\nexport enum intervalEnum {\n    small = 1,\n    middle = 2,\n    large = 3\n}\n\nexport const intervalSizeMap = new Map<intervalEnum, string>([\n    [intervalEnum.small, '小网'],\n    [intervalEnum.middle, '中网'],\n    [intervalEnum.large, '大网']\n])\n\nexport interface TradingStoreProps {\n    basePrice?: number\n    amplitudeInterval?: number\n    investment?: number\n    maxGear?: number\n}\n\nexport class TradingStore extends TradingStoreBaseInfo {\n    static defaultBasePrice = 1\n    static defaultAmplitudeInterval = 0.05\n    static defaultInvestment = 1000\n    static defaultAdditionalRate = 0.05\n    static defaultMaxGear = 9\n    static defaultMiddleAmplitudeInterval = 0.15\n    static defaultLargeAmplitudeInterval = 0.3\n\n    private basePrice: number = TradingStore.defaultBasePrice // 基础价位\n    private amplitudeInterval: number = TradingStore.defaultAmplitudeInterval // 网格大小 默认 5%\n    private investment: number = TradingStore.defaultInvestment // 初始买入价格 默认 500\n    private maxGear: number = TradingStore.defaultMaxGear //最低极限档位 默认 6档\n\n    private gear: number = 1 // 当前档位 这个字段暂时无用\n    private additionalRate: number = TradingStore.defaultAdditionalRate // 每下降一个档位，增加投入的金额比例 不支持配置\n    private middleAmplitudeInterval: number =\n        TradingStore.defaultMiddleAmplitudeInterval\n    private largeAmplitudeInterval: number =\n        TradingStore.defaultLargeAmplitudeInterval\n\n    public getBuyTradingList(): TradeInfoView[] {\n        const resultList: TradeInfoView[] = []\n        let currentGear: number = this.gear\n        while (currentGear <= this.maxGear) {\n            resultList.push(...this.getTradeInfoByGear(currentGear))\n            currentGear++\n        }\n        return resultList\n    }\n\n    private getTradeInfoByGear(currentGear: number): TradeInfoView[] {\n        const resultList: TradeInfoView[] = []\n        const rate = strip(1 - (currentGear - 1) * this.amplitudeInterval)\n        const sellRate = strip(1 - (currentGear - 2) * this.amplitudeInterval)\n        let buyingPrice = strip(this.basePrice * rate)\n        const expectedBuyingMoney = strip(\n            this.investment * (1 + this.additionalRate * (currentGear - 1))\n        )\n        const buyingQuantity = TradingStore.computedRealBuyingQuantity(\n            expectedBuyingMoney / buyingPrice\n        )\n        let buyingMoney = times(buyingQuantity, buyingPrice)\n        let sellPrice = strip(this.basePrice * sellRate)\n        // 小网格保留 10%，其中 5%是利润，5%是本金\n        const sellQuantity = ~~((buyingQuantity * 0.9) / 100) * 100\n        let sellMoney = times(sellPrice, sellQuantity)\n        const middleRateDiff = TradingStore.getRateDiffByRate(\n            rate,\n            this.middleAmplitudeInterval\n        )\n        const largeRateDiff = TradingStore.getRateDiffByRate(\n            rate,\n            this.largeAmplitudeInterval\n        )\n        buyingPrice = TradingStore.contractData(buyingPrice, 3, false)\n        sellPrice = TradingStore.contractData(sellPrice, 3, false)\n        buyingMoney = TradingStore.contractData(buyingMoney, 2)\n        sellMoney = TradingStore.contractData(sellMoney, 2)\n        const stockNumCollect = minus(buyingQuantity, sellQuantity)\n        const data: TradeInfoView = {\n            buyingPrice,\n            buyingMoney,\n            buyingQuantity,\n\n            sellQuantity,\n            sellPrice,\n            sellMoney,\n\n            netProfit: minus(sellMoney, buyingMoney),\n            stockNumCollect,\n            extraStockMoney: times(stockNumCollect, sellPrice),\n\n            currentGear,\n            rate,\n            intervalSize: intervalEnum.small\n        }\n        resultList.push(data)\n        if (middleRateDiff) {\n            const middleSellPrice = strip(\n                (rate + this.middleAmplitudeInterval) * this.basePrice\n            )\n            // 中网保留 5%，是利润，本金全部赎回\n            const middleSellQuantity = ~~((buyingQuantity * 0.95) / 100) * 100\n            const middleSellMoney = times(middleSellQuantity, middleSellPrice)\n            const middleStockNumCollect = minus(\n                buyingQuantity,\n                middleSellQuantity\n            )\n            resultList.push({\n                ...data,\n                intervalSize: intervalEnum.middle,\n                sellPrice: middleSellPrice,\n                sellQuantity: middleSellQuantity,\n                sellMoney: middleSellMoney,\n                netProfit: minus(middleSellMoney, buyingMoney),\n                stockNumCollect: middleStockNumCollect,\n                extraStockMoney: times(middleStockNumCollect, middleSellPrice)\n            })\n        }\n        if (largeRateDiff) {\n            const largeSellPrice = strip(\n                (rate + this.largeAmplitudeInterval) * this.basePrice\n            )\n            // 大网全部卖出，获取全部利润和本金\n            const largeSellQuantity = buyingQuantity\n            const largeSellMoney = times(largeSellQuantity, largeSellPrice)\n            const largeStockNumCollect = minus(\n                buyingQuantity,\n                largeSellQuantity\n            )\n            resultList.push({\n                ...data,\n                intervalSize: intervalEnum.large,\n                sellPrice: largeSellPrice,\n                sellQuantity: largeSellQuantity,\n                sellMoney: largeSellMoney,\n                netProfit: minus(largeSellMoney, buyingMoney),\n                stockNumCollect: largeStockNumCollect,\n                extraStockMoney: times(largeStockNumCollect, largeSellPrice)\n            })\n        }\n        return resultList\n    }\n\n    static getRateDiffByRate(rate: number, interval: number): number {\n        const diff = minus(1, rate)\n        if (diff !== 0) {\n            if (times(diff, 100) % times(interval, 100) === 0) {\n                return strip(diff / interval)\n            }\n        }\n        return 0\n    }\n\n    static computedRealBuyingQuantity(expectedQuantity: number): number {\n        // 由于股票买入必须是 100 的整数倍，这里传入的预期买入股票数量不一定是 100 整数, 这里需要偏差处理一下，获得最终的买入股数\n        const baseQuantity = times(~~(expectedQuantity / 100), 100)\n        const diff = minus(expectedQuantity, baseQuantity)\n        if (diff >= 50) {\n            return plus(baseQuantity, 100)\n        }\n        return baseQuantity\n    }\n\n    static contractData(data: number): number\n    static contractData(data: number, fractionDigits: number): number\n    static contractData<T = string | number>(\n        data: number,\n        fractionDigits: number,\n        returnString: boolean\n    ): T\n\n    static contractData(\n        data: number,\n        fractionDigits: number = 3,\n        returnString: boolean = true\n    ) {\n        // 默认数据保留三位小数\n        const result = data.toFixed(fractionDigits)\n        if (returnString) {\n            return result\n        }\n        return parseFloat(result)\n    }\n\n    constructor(props?: TradingStoreProps) {\n        super()\n        if (props) {\n            props.basePrice !== undefined && (this.basePrice = props.basePrice)\n            props.amplitudeInterval !== undefined &&\n                (this.amplitudeInterval = props.amplitudeInterval)\n            props.investment !== undefined &&\n                (this.investment = props.investment)\n            props.maxGear !== undefined && (this.maxGear = props.maxGear)\n        }\n    }\n\n    public getTradingStoreProps(): TradingStoreProps {\n        return {\n            basePrice: this.getBasePrice(),\n            amplitudeInterval: this.getAmplitudeInterval(),\n            investment: this.getInvestment(),\n            maxGear: this.getMaxGear()\n        }\n    }\n\n    public setBasePrice(price: number) {\n        this.basePrice = price\n    }\n\n    public getBasePrice() {\n        return this.basePrice\n    }\n\n    public setAmplitudeInterval(interval: number) {\n        this.amplitudeInterval = interval\n    }\n\n    public getAmplitudeInterval() {\n        return this.amplitudeInterval\n    }\n\n    public setInvestment(investment: number) {\n        this.investment = investment\n    }\n\n    public getInvestment() {\n        return this.investment\n    }\n\n    public getGear() {\n        return this.gear\n    }\n\n    public setMaxGear(minGear: number) {\n        this.maxGear = minGear\n    }\n\n    public getMaxGear() {\n        return this.maxGear\n    }\n\n    public getMiddleAmplitudeInterval() {\n        return this.middleAmplitudeInterval\n    }\n\n    public getLargeAmplitudeInterval() {\n        return this.largeAmplitudeInterval\n    }\n}\n","import React from 'react'\nimport { Button, Form, InputNumber } from 'antd'\nimport NP from 'number-precision'\n\nconst { times } = NP\n\nexport function TradeForm(props: {\n    basePrice: number\n    amplitudeInterval: number\n    investment: number\n    maxGear: number\n    handleChange: (type: string, value: number | undefined) => void\n    handleGenerate: () => void\n}) {\n    const {\n        basePrice,\n        maxGear,\n        investment,\n        amplitudeInterval,\n        handleChange,\n        handleGenerate\n    } = props\n    return (\n        <Form layout=\"inline\">\n            <Form.Item label=\"基准基金价格\">\n                <InputNumber\n                    value={basePrice}\n                    onChange={value => handleChange('basePrice', value)}\n                    placeholder=\"输入基准基金价格\"\n                />\n            </Form.Item>\n            <Form.Item label=\"基准买入价格\">\n                <InputNumber\n                    value={investment}\n                    onChange={value => handleChange('investment', value)}\n                    placeholder=\"输入基准买入价格\"\n                />\n            </Form.Item>\n            <Form.Item label=\"网格大小\">\n                <InputNumber\n                    min={0}\n                    max={100}\n                    formatter={value => `${value}%`}\n                    parser={value => (value ? value.replace('%', '') : 0)}\n                    value={times(amplitudeInterval, 100)}\n                    onChange={value => handleChange('amplitudeInterval', value)}\n                    placeholder=\"输入网格大小\"\n                />\n            </Form.Item>\n            <Form.Item label=\"极限档位\">\n                <InputNumber\n                    value={maxGear}\n                    onChange={value => handleChange('maxGear', value)}\n                    placeholder=\"输入极限档位\"\n                />\n            </Form.Item>\n            <Form.Item>\n                <Button onClick={handleGenerate} type=\"primary\">\n                    生成\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n","import { ColumnProps } from 'antd/es/table'\nimport { Table } from 'antd'\nimport React from 'react'\nimport NP from 'number-precision'\nimport {\n    intervalEnum,\n    intervalSizeMap,\n    TradeInfoView,\n    TradingStore\n} from '../../store/TradingStore'\nimport { compose } from '../../util/rambda'\nimport '../../style/component/trading/TradeTable.scss'\n\nconst { times, plus, minus } = NP\n\ninterface TradeInfoUIView {\n    intervalSizeRowSpan: number\n    currentGearRowSpan: number\n    buyingPriceRowSpan: number\n    buyingQuantityRowSpan: number\n    buyingMoneyRowSpan: number\n}\n\nconst defaultTradeInfoUIView: TradeInfoUIView = {\n    intervalSizeRowSpan: 1,\n    currentGearRowSpan: 1,\n    buyingMoneyRowSpan: 1,\n    buyingPriceRowSpan: 1,\n    buyingQuantityRowSpan: 1\n}\n\ninterface ComposeTradeInfoView extends TradeInfoView, TradeInfoUIView {}\n\nconst classNameByIntervalSize: { [k in intervalEnum]: string } = {\n    [intervalEnum.small]: '',\n    [intervalEnum.middle]: 'middle',\n    [intervalEnum.large]: 'large'\n}\n\nconst getRender = function<\n    T extends ComposeTradeInfoView,\n    K extends keyof ComposeTradeInfoView,\n    K1 extends keyof TradeInfoUIView\n>(\n    callback?: (data: T[K], record: T) => React.ReactNode,\n    key?: K1,\n    mergeRows: boolean = true\n) {\n    return function(data: T[K], record: T) {\n        const node: {\n            children: React.ReactNode\n            props: { rowSpan?: number; className?: string }\n        } = {\n            children: callback ? callback(data, record) : data,\n            props: { className: classNameByIntervalSize[record.intervalSize] }\n        }\n        if (mergeRows && key) {\n            node.props.rowSpan = record[key]\n        }\n        return node\n    }\n}\n\nconst columns: ColumnProps<ComposeTradeInfoView>[] = [\n    {\n        title: '档位',\n        dataIndex: 'currentGear',\n        render: getRender(\n            (_, record) => {\n                return `${times(record.rate, 100)}%`\n            },\n            'currentGearRowSpan',\n            true\n        )\n    },\n    {\n        key: 'intervalSize',\n        title: '网格大小',\n        render: getRender(\n            (_, record) => intervalSizeMap.get(record.intervalSize) || '未知',\n            'intervalSizeRowSpan',\n            false\n        )\n    },\n    {\n        title: '买入操作',\n        children: [\n            {\n                title: '触发买入价格',\n                key: 'buyingTriggerPrice',\n                render: getRender(\n                    (_, record) => {\n                        return `<= ${plus(record.buyingPrice, 0.001)}`\n                    },\n                    'buyingPriceRowSpan',\n                    false\n                )\n            },\n            {\n                title: '买入价格',\n                dataIndex: 'buyingPrice',\n                render: getRender(undefined, undefined, false)\n            },\n            {\n                title: '买入股数',\n                dataIndex: 'buyingQuantity',\n                render: getRender(undefined, undefined, false)\n            },\n            {\n                title: '买入金额',\n                dataIndex: 'buyingMoney',\n                render: getRender(undefined, undefined, false)\n            }\n        ]\n    },\n    {\n        title: '卖出操作',\n        children: [\n            {\n                title: '卖出触发价格',\n                key: 'sellTriggerPrice',\n                render: getRender(\n                    (_, record) => {\n                        return `>= ${minus(record.sellPrice, 0.001)}`\n                    },\n                    'buyingPriceRowSpan',\n                    false\n                )\n            },\n            {\n                title: '卖出价格',\n                dataIndex: 'sellPrice',\n                render: getRender(undefined, undefined, false)\n            },\n            {\n                title: '卖出股数股数',\n                dataIndex: 'sellQuantity',\n                render: getRender(undefined, undefined, false)\n            },\n            {\n                title: '卖出金额',\n                dataIndex: 'sellMoney',\n                render: getRender(undefined, undefined, false)\n            }\n        ]\n    },\n    {\n        title: '操作利润',\n        children: [\n            {\n                title: '本金入袋盈亏',\n                dataIndex: 'netProfit',\n                render: getRender(undefined, undefined, false)\n            },\n            {\n                title: '获得的股数',\n                dataIndex: 'stockNumCollect',\n                render: getRender(undefined, undefined, false)\n            },\n            {\n                title: '额外股数对应金额',\n                dataIndex: 'extraStockMoney',\n                render: getRender(undefined, undefined, false)\n            },\n            {\n                title: '合计收益',\n                key: 'total',\n                render: getRender((_, record) =>\n                    plus(record.extraStockMoney, record.netProfit)\n                )\n            }\n        ]\n    }\n]\n\n/**\n * 数据分组，根据 key 找到相同的数据 给新的 key 赋值\n * 第一项赋值为相同的个数，后面项均设置为 0\n * */\nconst groupDataByKey = function<\n    K1 extends keyof ComposeTradeInfoView,\n    K2 extends keyof TradeInfoUIView\n>(list: ComposeTradeInfoView[], key: K1, newKey: K2): ComposeTradeInfoView[] {\n    const resultList: ComposeTradeInfoView[] = []\n    let num = 0\n    // let firstData: ComposeTradeInfoView[K1] | undefined\n    // const firstIndex: {index: number, rowSpan: number}[] = []\n    for (let i = list.length - 1; i >= 0; i--) {\n        const item = list[i]\n        const nextItem = list[i - 1] ? list[i - 1] : null\n        if (nextItem && nextItem[key] === item[key]) {\n            num++\n            resultList.unshift({\n                ...item,\n                [newKey]: 0\n            })\n        } else {\n            num++\n            resultList.unshift({\n                ...item,\n                [newKey]: num\n            })\n            num = 0\n        }\n    }\n    return resultList\n}\n\nconst curringGroupDataByKey = function<\n    K1 extends keyof ComposeTradeInfoView,\n    K2 extends keyof TradeInfoUIView\n>(\n    key: K1,\n    newKey: K2\n): (list: ComposeTradeInfoView[]) => ComposeTradeInfoView[] {\n    return function(list: ComposeTradeInfoView[]) {\n        return groupDataByKey(list, key, newKey)\n    }\n}\n\nconst injectUIDataIntoRawData = function(\n    data: TradeInfoView[]\n): ComposeTradeInfoView[] {\n    const preProcessList = data.map<ComposeTradeInfoView>(item => ({\n        ...item,\n        ...defaultTradeInfoUIView\n    }))\n    const composedProcess = compose(\n        curringGroupDataByKey('intervalSize', 'intervalSizeRowSpan'),\n        curringGroupDataByKey('currentGear', 'currentGearRowSpan'),\n        curringGroupDataByKey('buyingPrice', 'buyingPriceRowSpan'),\n        curringGroupDataByKey('buyingQuantity', 'buyingQuantityRowSpan'),\n        curringGroupDataByKey('buyingMoney', 'buyingMoneyRowSpan')\n    )\n    return composedProcess(preProcessList)\n}\n\nexport function TradeTable(props: { store: TradingStore }) {\n    const { store } = props\n    const rawDataList = store.getBuyTradingList()\n    return (\n        <Table<ComposeTradeInfoView>\n            className=\"trade-table\"\n            style={{ margin: '20px 0 20px 0' }}\n            rowKey={record => `${record.buyingPrice}|${record.intervalSize}`}\n            bordered\n            dataSource={injectUIDataIntoRawData(rawDataList)}\n            columns={columns}\n            pagination={false}\n        />\n    )\n}\n","export const compose = function<P>(\n    ...fn: ((data: P) => P)[]\n): (params: P) => P {\n    return function(params: P): P {\n        return fn.reduce((accumulation, item) => item(accumulation), params)\n    }\n}\n","import React from 'react'\nimport { Badge, Descriptions } from 'antd'\nimport NP from 'number-precision'\nimport { TradingStore } from '../../store/TradingStore'\n\nconst { plus, times, minus } = NP\n\nconst { Item } = Descriptions\n\nfunction processDataToPercent(data: number): string {\n    return `${times(data, 100)}%`\n}\n\nexport function TradeInfo(props: { store: TradingStore }) {\n    const { store } = props\n    const amplitudeInterval = store.getAmplitudeInterval()\n    const basePrice = store.getBasePrice()\n    const investment = store.getInvestment()\n    const maxGear = store.getMaxGear()\n    const maxDrop = times(minus(maxGear, 1), amplitudeInterval)\n    const maxRequireMoney = store\n        .getBuyTradingList()\n        .reduce((accumulation, item) => plus(accumulation, item.buyingMoney), 0)\n    return (\n        <Descriptions bordered>\n            <Item label=\"基金基准价格\">{basePrice}</Item>\n            <Item label=\"买入基准价格\">{investment}</Item>\n            <Item label=\"网格大小\">\n                {processDataToPercent(amplitudeInterval)}\n            </Item>\n            <Item label=\"极限档位\">{maxGear}</Item>\n            <Item label=\"极限跌幅\">\n                <Badge status=\"warning\" text={processDataToPercent(maxDrop)} />\n            </Item>\n            <Item label=\"极限资金\">\n                <Badge status=\"processing\" text={maxRequireMoney} />\n            </Item>\n        </Descriptions>\n    )\n}\n","/**\n * 本地持久化存储设置\n * */\nimport { v4 as uuidv4 } from 'uuid'\nimport { TradingStoreProps } from './TradingStore'\n\nexport interface PersistenceStoreProps {\n    storage?: Storage\n    persistenceKey?: string\n}\n\nexport interface PersistenceDataView<T> {\n    // 持久化的保存数据格式\n    id: string\n    date: string\n    data: T\n}\n\nexport interface responseData<T, E = Error> {\n    success: boolean\n    error?: E\n    data?: T\n}\n\nclass PersistenceStore<K> {\n    storage: Storage = localStorage // 存储引擎，默认用 localStorage，备选可以有 sessionStorage\n\n    private persistenceKey = 'trade_list'\n\n    constructor(props?: PersistenceStoreProps) {\n        if (props) {\n            props.storage && (this.storage = props.storage)\n            props.persistenceKey && (this.persistenceKey = props.persistenceKey)\n        }\n    }\n\n    static generateKey(): string {\n        return uuidv4()\n    }\n\n    static generateDate() {\n        return new Date().toLocaleString()\n    }\n\n    public getPersistenceView(): responseData<K> {\n        try {\n            const data = this.storage.getItem(this.persistenceKey)\n            if (data) {\n                return {\n                    success: true,\n                    data: JSON.parse(data)\n                }\n            }\n            return {\n                success: true,\n                data: undefined\n            }\n        } catch (e) {\n            return {\n                success: false,\n                error: e\n            }\n        }\n    }\n\n    public savePersistenceView(data: K): responseData<K> {\n        try {\n            const dataString = JSON.stringify(data)\n            this.storage.setItem(this.persistenceKey, dataString)\n            return {\n                success: true,\n                data\n            }\n        } catch (e) {\n            return {\n                success: false,\n                error: e\n            }\n        }\n    }\n\n    public setStorage(storage: Storage) {\n        this.storage = storage\n    }\n    public getStorage() {\n        return this.storage\n    }\n    public getPersistenceKey() {\n        return this.persistenceKey\n    }\n    public setPersistence(key: string) {\n        this.persistenceKey = key\n    }\n}\n\nexport class TradeInfoViewPersistence extends PersistenceStore<\n    PersistenceDataView<TradingStoreProps>[]\n> {\n    public addData(\n        dataParams: TradingStoreProps\n    ): responseData<PersistenceDataView<TradingStoreProps>[]> {\n        const id = PersistenceStore.generateKey()\n        const data = {\n            id,\n            date: PersistenceStore.generateDate(),\n            data: dataParams\n        }\n        try {\n            const getResponse = this.getPersistenceView()\n            if (getResponse.success) {\n                let result: PersistenceDataView<TradingStoreProps>[] = []\n                if (!getResponse.data) {\n                    result = [data]\n                } else {\n                    result = getResponse.data\n                    result.push(data)\n                }\n                const saveResponse = this.savePersistenceView(result)\n                if (saveResponse.success) {\n                    return {\n                        success: true,\n                        data: saveResponse.data\n                    }\n                }\n                throw saveResponse.error\n            }\n            throw getResponse.error\n        } catch (e) {\n            return {\n                success: false,\n                error: e\n            }\n        }\n    }\n\n    public removeDataById(id: string): responseData<string> {\n        try {\n            const getResponse = this.getPersistenceView()\n            if (getResponse.success && getResponse.data) {\n                const index = getResponse.data.findIndex(item => item.id === id)\n                const list = getResponse.data\n                list.splice(index, 1)\n                this.savePersistenceView(list)\n                return {\n                    success: true,\n                    data: id\n                }\n            }\n            return {\n                success: true,\n                data: id\n            }\n        } catch (e) {\n            return {\n                success: false\n            }\n        }\n    }\n}\n","import React, { useState } from 'react'\nimport { Button, Drawer, Input } from 'antd'\nimport '../../style/component/trading/TradeHeaderInfo.scss'\nimport { TradeInfoViewPersistence } from '../../store/persistenceStore'\nimport { TradingStore } from '../../store/TradingStore'\n\nexport function TradeHeaderInfo(props: {\n    name: string\n    code: string\n    store: TradingStore\n    handleChange: (type: 'name' | 'code', value: string) => void\n}) {\n    const { name, code, handleChange, store } = props\n    const [valuationVisible, setValuationVisible] = useState(false)\n    const [priceVisible, setPriceVisible] = useState(false)\n    const handleValuationClick = function() {\n        setValuationVisible(true)\n    }\n    const handlePriceClick = function() {\n        setPriceVisible(true)\n    }\n    const onValuationClose = function() {\n        setValuationVisible(false)\n    }\n    const onPriceClose = function() {\n        setPriceVisible(false)\n    }\n    const handleSave = function() {\n        const tradeInfoViewPersistence = new TradeInfoViewPersistence()\n        tradeInfoViewPersistence.addData(store.getTradingStoreProps())\n    }\n    return (\n        <div className=\"trade-header-info\">\n            <div className=\"header-container\">\n                <Input\n                    className=\"custom-input-name\"\n                    placeholder=\"输入网格名称\"\n                    value={name}\n                    onChange={e => handleChange('name', e.target.value)}\n                />\n                <Input\n                    className=\"custom-input-code\"\n                    placeholder=\"输入基金代码\"\n                    value={code}\n                    onChange={e => handleChange('code', e.target.value)}\n                />\n                <Button type=\"primary\" onClick={handleSave}>\n                    保存配置\n                </Button>\n                <Button type=\"danger\">删除配置</Button>\n                <Button onClick={handleValuationClick}>估值查看</Button>\n                {/*<Button onClick={handlePriceClick}>查看qdii溢折价</Button>*/}\n            </div>\n\n            <Drawer\n                title=\"折溢价查看\"\n                placement=\"right\"\n                width={1300}\n                closable={false}\n                visible={priceVisible}\n                onClose={onPriceClose}\n            >\n                <div className=\"iframe-container\">\n                    <iframe\n                        className=\"iframe\"\n                        title=\"jisilu\"\n                        src=\"https://www.jisilu.cn/data/qdii/#qdii\"\n                    />\n                </div>\n            </Drawer>\n            <Drawer\n                title=\"估值查看\"\n                placement=\"right\"\n                width={700}\n                closable={false}\n                visible={valuationVisible}\n                onClose={onValuationClose}\n            >\n                <div className=\"iframe-container\">\n                    <iframe\n                        className=\"iframe\"\n                        title=\"danjuan\"\n                        src=\"https://danjuanapp.com/djmodule/value-center?channel=1300100141\"\n                    />\n                </div>\n            </Drawer>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport { BackTop, Icon, Layout, Menu } from 'antd'\nimport NP from 'number-precision'\nimport { TradingStore } from '../store/TradingStore'\nimport { TradeForm } from '../component/trading/TradeForm'\nimport { TradeTable } from '../component/trading/TradeTable'\nimport { TradeInfo } from '../component/trading/TradeInfo'\nimport { TradeHeaderInfo } from '../component/trading/TradeHeaderInfo'\n\nconst { divide } = NP\n\nconst { Sider, Header, Content, Footer } = Layout\n\nconst { Item: MenuItem } = Menu\n\nexport default function Trading() {\n    const [basePrice, setPrice] = useState(TradingStore.defaultBasePrice)\n    const [amplitudeInterval, setAmplitudeInterval] = useState(\n        TradingStore.defaultAmplitudeInterval\n    )\n    const [investment, setInvestment] = useState(TradingStore.defaultInvestment)\n    const [maxGear, setMaxGear] = useState(TradingStore.defaultMaxGear)\n    const [store, setStore] = useState(new TradingStore())\n    const [collapsed, setCollapsed] = useState(true)\n    const [name, setName] = useState('')\n    const [code, setCode] = useState('')\n    const handleChange = function(type: string, value: number | undefined) {\n        if (value) {\n            switch (type) {\n                case 'basePrice':\n                    setPrice(value)\n                    break\n                case 'investment':\n                    setInvestment(value)\n                    break\n                case 'amplitudeInterval':\n                    setAmplitudeInterval(divide(value, 100))\n                    break\n                case 'maxGear':\n                    setMaxGear(value)\n                    break\n                default:\n                    break\n            }\n        }\n    }\n    const handleBaseInfoChange = function(\n        type: 'code' | 'name',\n        value: string\n    ) {\n        console.log(type, value)\n        switch (type) {\n            case 'code':\n                setCode(value)\n                break\n            case 'name':\n                setName(value)\n                break\n            default:\n                break\n        }\n    }\n    const handleGenerate = function() {\n        const newStore = new TradingStore({\n            amplitudeInterval,\n            basePrice,\n            investment,\n            maxGear\n        })\n        setStore(newStore)\n    }\n    return (\n        <Layout>\n            <BackTop visibilityHeight={200} />\n            <Sider\n                width={200}\n                collapsible\n                collapsed={collapsed}\n                onCollapse={() => setCollapsed(!collapsed)}\n            >\n                <div className=\"logo\">logo占位符</div>\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                    <MenuItem key=\"1\">\n                        <Icon type=\"desktop\" />\n                        <span>网格设置页面</span>\n                    </MenuItem>\n                    <MenuItem key=\"2\">\n                        <Icon type=\"user\" />\n                        <span>工具页面</span>\n                    </MenuItem>\n                </Menu>\n            </Sider>\n            <Layout>\n                <Header style={{ background: '#fff', padding: '0 16px' }}>\n                    <TradeHeaderInfo\n                        store={store}\n                        name={name}\n                        code={code}\n                        handleChange={handleBaseInfoChange}\n                    />\n                </Header>\n                <Content\n                    style={{\n                        background: '#fff',\n                        padding: '10px 16px',\n                        margin: '10px 0'\n                    }}\n                >\n                    <TradeForm\n                        amplitudeInterval={amplitudeInterval}\n                        basePrice={basePrice}\n                        investment={investment}\n                        maxGear={maxGear}\n                        handleChange={handleChange}\n                        handleGenerate={handleGenerate}\n                    />\n                    <TradeTable store={store} />\n                    <TradeInfo store={store} />\n                </Content>\n                <Footer\n                    style={{\n                        background: '#fff',\n                        padding: '10px 16px',\n                        textAlign: 'center'\n                    }}\n                >\n                    不构成任何投资建议, 投资需谨慎\n                </Footer>\n            </Layout>\n        </Layout>\n    )\n}\n"],"sourceRoot":""}