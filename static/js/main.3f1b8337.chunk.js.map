{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["AsyncCounter","Loadable","loader","__webpack_require__","e","then","bind","loading","react_default","a","createElement","skeleton_default","active","AsyncTodoList","AsyncNotFound","AsyncMarkDown","AsyncSg2Ts","Promise","all","Trading","wrapperNav","BaseComponent","props","react_router_dom","to","App","Component","render","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f1b8337.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n    HashRouter as Router,\n    Route,\n    Link,\n    Redirect,\n    Switch\n} from 'react-router-dom'\nimport Loadable from 'react-loadable'\nimport Skeleton from 'antd/lib/skeleton'\nimport './style/App.css'\n\nconst AsyncCounter = Loadable({\n    loader: () => import('./page/counter'),\n    loading() {\n        return <Skeleton active />\n    }\n})\n\nconst AsyncTodoList = Loadable({\n    loader: () => import('./page/todoList'),\n    loading() {\n        return <Skeleton active />\n    }\n})\n\nconst AsyncNotFound = Loadable({\n    loader: () => import('./page/notFound'),\n    loading() {\n        return <Skeleton active />\n    }\n})\n\nconst AsyncMarkDown = Loadable({\n    loader: () => import('./page/markdown'),\n    loading() {\n        return <Skeleton active />\n    }\n})\n\nconst AsyncSg2Ts = Loadable({\n    loader: () => import('./page/sg2ts'),\n    loading: () => {\n        return <Skeleton active />\n    }\n})\n\nconst Trading = Loadable({\n    loader: () => import('./page/trading'),\n    loading: () => <Skeleton active />\n})\n\nconst wrapperNav: (\n    BaseComponent: React.ComponentType<any>\n) => React.ComponentType<any> = BaseComponent => props => {\n    return (\n        <div>\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"/counter\">计数器</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/todoList\">待办事项</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/markdown\">markdown</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/sg2ts\">sg2ts</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/trading\">网格交易策略</Link>\n                    </li>\n                </ul>\n            </nav>\n            <BaseComponent {...props} />\n        </div>\n    )\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route\n                        path=\"/todoList\"\n                        component={wrapperNav(AsyncTodoList)}\n                    />\n                    <Route\n                        path=\"/counter\"\n                        component={wrapperNav(AsyncCounter)}\n                    />\n                    <Route\n                        path=\"/markdown\"\n                        component={wrapperNav(AsyncMarkDown)}\n                    />\n                    <Route path=\"/404\" component={wrapperNav(AsyncNotFound)} />\n                    <Route path=\"/sg2ts\" component={AsyncSg2Ts} />\n                    <Route path=\"/trading\" component={Trading} />\n                    <Route path=\"*\" render={() => <Redirect to=\"/404\" />} />\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/javascript/javascript'\nimport './style/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}